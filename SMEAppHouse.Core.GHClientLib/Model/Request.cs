/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Request
    /// </summary>
    [DataContract]
    public partial class Request :  IEquatable<Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Request" /> class.
        /// </summary>
        /// <param name="Vehicles">An array of vehicles that can be employed.</param>
        /// <param name="VehicleTypes">An array of vehicle types.</param>
        /// <param name="Services">An array of services.</param>
        /// <param name="Shipments">An array of shipments.</param>
        /// <param name="Relations">An array of relations.</param>
        /// <param name="Algorithm">Algorithm.</param>
        /// <param name="Objectives">An array of objectives.</param>
        /// <param name="CostMatrices">An array of cost matrices.</param>
        /// <param name="Configuration">Configuration.</param>
        public Request(List<Vehicle> Vehicles = default(List<Vehicle>), 
                        List<VehicleType> VehicleTypes = default(List<VehicleType>), 
                        List<Service> Services = default(List<Service>), 
                        List<Shipment> Shipments = default(List<Shipment>), 
                        List<Relation> Relations = default(List<Relation>), 
                        Algorithm Algorithm = default(Algorithm), 
                        List<Objective> Objectives = default(List<Objective>), 
                        List<CostMatrix> CostMatrices = default(List<CostMatrix>), 
                        Configuration Configuration = default(Configuration))
        {
            this.Vehicles = Vehicles;
            this.VehicleTypes = VehicleTypes;
            this.Services = Services;
            this.Shipments = Shipments;
            this.Relations = Relations;
            this.Algorithm = Algorithm;
            this.Objectives = Objectives;
            this.CostMatrices = CostMatrices;
            this.Configuration = Configuration;
        }
        
        /// <summary>
        /// An array of vehicles that can be employed
        /// </summary>
        /// <value>An array of vehicles that can be employed</value>
        [DataMember(Name="vehicles", EmitDefaultValue=false)]
        public List<Vehicle> Vehicles { get; set; }

        /// <summary>
        /// An array of vehicle types
        /// </summary>
        /// <value>An array of vehicle types</value>
        [DataMember(Name="vehicle_types", EmitDefaultValue=false)]
        public List<VehicleType> VehicleTypes { get; set; }

        /// <summary>
        /// An array of services
        /// </summary>
        /// <value>An array of services</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<Service> Services { get; set; }

        /// <summary>
        /// An array of shipments
        /// </summary>
        /// <value>An array of shipments</value>
        [DataMember(Name="shipments", EmitDefaultValue=false)]
        public List<Shipment> Shipments { get; set; }

        /// <summary>
        /// An array of relations
        /// </summary>
        /// <value>An array of relations</value>
        [DataMember(Name="relations", EmitDefaultValue=false)]
        public List<Relation> Relations { get; set; }

        /// <summary>
        /// Gets or Sets Algorithm
        /// </summary>
        [DataMember(Name="algorithm", EmitDefaultValue=false)]
        public Algorithm Algorithm { get; set; }

        /// <summary>
        /// An array of objectives
        /// </summary>
        /// <value>An array of objectives</value>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<Objective> Objectives { get; set; }

        /// <summary>
        /// An array of cost matrices
        /// </summary>
        /// <value>An array of cost matrices</value>
        [DataMember(Name="cost_matrices", EmitDefaultValue=false)]
        public List<CostMatrix> CostMatrices { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request {\n");
            sb.Append("  Vehicles: ").Append(Vehicles).Append("\n");
            sb.Append("  VehicleTypes: ").Append(VehicleTypes).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  CostMatrices: ").Append(CostMatrices).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Request);
        }

        /// <summary>
        /// Returns true if Request instances are equal
        /// </summary>
        /// <param name="input">Instance of Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    Vehicles == input.Vehicles ||
                    Vehicles != null &&
                    Vehicles.SequenceEqual(input.Vehicles)
                ) && 
                (
                    VehicleTypes == input.VehicleTypes ||
                    VehicleTypes != null &&
                    VehicleTypes.SequenceEqual(input.VehicleTypes)
                ) && 
                (
                    Services == input.Services ||
                    Services != null &&
                    Services.SequenceEqual(input.Services)
                ) && 
                (
                    Shipments == input.Shipments ||
                    Shipments != null &&
                    Shipments.SequenceEqual(input.Shipments)
                ) && 
                (
                    Relations == input.Relations ||
                    Relations != null &&
                    Relations.SequenceEqual(input.Relations)
                ) && 
                (
                    Algorithm == input.Algorithm ||
                    (Algorithm != null &&
                    Algorithm.Equals(input.Algorithm))
                ) && 
                (
                    Objectives == input.Objectives ||
                    Objectives != null &&
                    Objectives.SequenceEqual(input.Objectives)
                ) && 
                (
                    CostMatrices == input.CostMatrices ||
                    CostMatrices != null &&
                    CostMatrices.SequenceEqual(input.CostMatrices)
                ) && 
                (
                    Configuration == input.Configuration ||
                    (Configuration != null &&
                    Configuration.Equals(input.Configuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Vehicles != null)
                    hashCode = hashCode * 59 + Vehicles.GetHashCode();
                if (VehicleTypes != null)
                    hashCode = hashCode * 59 + VehicleTypes.GetHashCode();
                if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                if (Shipments != null)
                    hashCode = hashCode * 59 + Shipments.GetHashCode();
                if (Relations != null)
                    hashCode = hashCode * 59 + Relations.GetHashCode();
                if (Algorithm != null)
                    hashCode = hashCode * 59 + Algorithm.GetHashCode();
                if (Objectives != null)
                    hashCode = hashCode * 59 + Objectives.GetHashCode();
                if (CostMatrices != null)
                    hashCode = hashCode * 59 + CostMatrices.GetHashCode();
                if (Configuration != null)
                    hashCode = hashCode * 59 + Configuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
