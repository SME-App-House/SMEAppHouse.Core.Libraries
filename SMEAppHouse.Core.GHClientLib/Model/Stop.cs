/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Stop
    /// </summary>
    [DataContract]
    public partial class Stop :  IEquatable<Stop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="Duration">duration of stop, i.e. time in seconds the corresponding activity takes.</param>
        /// <param name="PreparationTime">preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location.</param>
        /// <param name="TimeWindows">array of time windows. currently, only a single time window is allowed.</param>
        public Stop(Address Address = default(Address), long? Duration = default(long?), long? PreparationTime = default(long?), List<TimeWindow> TimeWindows = default(List<TimeWindow>))
        {
            this.Address = Address;
            this.Duration = Duration;
            this.PreparationTime = PreparationTime;
            this.TimeWindows = TimeWindows;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// duration of stop, i.e. time in seconds the corresponding activity takes
        /// </summary>
        /// <value>duration of stop, i.e. time in seconds the corresponding activity takes</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location
        /// </summary>
        /// <value>preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location</value>
        [DataMember(Name="preparation_time", EmitDefaultValue=false)]
        public long? PreparationTime { get; set; }

        /// <summary>
        /// array of time windows. currently, only a single time window is allowed
        /// </summary>
        /// <value>array of time windows. currently, only a single time window is allowed</value>
        [DataMember(Name="time_windows", EmitDefaultValue=false)]
        public List<TimeWindow> TimeWindows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stop {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  PreparationTime: ").Append(PreparationTime).Append("\n");
            sb.Append("  TimeWindows: ").Append(TimeWindows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Stop);
        }

        /// <summary>
        /// Returns true if Stop instances are equal
        /// </summary>
        /// <param name="input">Instance of Stop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stop input)
        {
            if (input == null)
                return false;

            return 
                (
                    Address == input.Address ||
                    (Address != null &&
                    Address.Equals(input.Address))
                ) && 
                (
                    Duration == input.Duration ||
                    (Duration != null &&
                    Duration.Equals(input.Duration))
                ) && 
                (
                    PreparationTime == input.PreparationTime ||
                    (PreparationTime != null &&
                    PreparationTime.Equals(input.PreparationTime))
                ) && 
                (
                    TimeWindows == input.TimeWindows ||
                    TimeWindows != null &&
                    TimeWindows.SequenceEqual(input.TimeWindows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                if (PreparationTime != null)
                    hashCode = hashCode * 59 + PreparationTime.GetHashCode();
                if (TimeWindows != null)
                    hashCode = hashCode * 59 + TimeWindows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
