/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Break
    /// </summary>
    [DataContract]
    public partial class Break :  IEquatable<Break>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Break" /> class.
        /// </summary>
        /// <param name="Earliest">earliest start of break.</param>
        /// <param name="Latest">latest start of break.</param>
        /// <param name="Duration">duration of break.</param>
        /// <param name="MaxDrivingTime">max driving time without break.</param>
        /// <param name="InitialDrivingTime">initial driving time, i.e. the time your driver has already spent for driving.</param>
        /// <param name="PossibleSplit">array of splits.</param>
        public Break(long? Earliest = default(long?), long? Latest = default(long?), long? Duration = default(long?), long? MaxDrivingTime = default(long?), long? InitialDrivingTime = default(long?), List<long?> PossibleSplit = default(List<long?>))
        {
            this.Earliest = Earliest;
            this.Latest = Latest;
            this.Duration = Duration;
            this.MaxDrivingTime = MaxDrivingTime;
            this.InitialDrivingTime = InitialDrivingTime;
            this.PossibleSplit = PossibleSplit;
        }
        
        /// <summary>
        /// earliest start of break
        /// </summary>
        /// <value>earliest start of break</value>
        [DataMember(Name="earliest", EmitDefaultValue=false)]
        public long? Earliest { get; set; }

        /// <summary>
        /// latest start of break
        /// </summary>
        /// <value>latest start of break</value>
        [DataMember(Name="latest", EmitDefaultValue=false)]
        public long? Latest { get; set; }

        /// <summary>
        /// duration of break
        /// </summary>
        /// <value>duration of break</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// max driving time without break
        /// </summary>
        /// <value>max driving time without break</value>
        [DataMember(Name="max_driving_time", EmitDefaultValue=false)]
        public long? MaxDrivingTime { get; set; }

        /// <summary>
        /// initial driving time, i.e. the time your driver has already spent for driving
        /// </summary>
        /// <value>initial driving time, i.e. the time your driver has already spent for driving</value>
        [DataMember(Name="initial_driving_time", EmitDefaultValue=false)]
        public long? InitialDrivingTime { get; set; }

        /// <summary>
        /// array of splits
        /// </summary>
        /// <value>array of splits</value>
        [DataMember(Name="possible_split", EmitDefaultValue=false)]
        public List<long?> PossibleSplit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Break {\n");
            sb.Append("  Earliest: ").Append(Earliest).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MaxDrivingTime: ").Append(MaxDrivingTime).Append("\n");
            sb.Append("  InitialDrivingTime: ").Append(InitialDrivingTime).Append("\n");
            sb.Append("  PossibleSplit: ").Append(PossibleSplit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Break);
        }

        /// <summary>
        /// Returns true if Break instances are equal
        /// </summary>
        /// <param name="input">Instance of Break to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Break input)
        {
            if (input == null)
                return false;

            return 
                (
                    Earliest == input.Earliest ||
                    (Earliest != null &&
                    Earliest.Equals(input.Earliest))
                ) && 
                (
                    Latest == input.Latest ||
                    (Latest != null &&
                    Latest.Equals(input.Latest))
                ) && 
                (
                    Duration == input.Duration ||
                    (Duration != null &&
                    Duration.Equals(input.Duration))
                ) && 
                (
                    MaxDrivingTime == input.MaxDrivingTime ||
                    (MaxDrivingTime != null &&
                    MaxDrivingTime.Equals(input.MaxDrivingTime))
                ) && 
                (
                    InitialDrivingTime == input.InitialDrivingTime ||
                    (InitialDrivingTime != null &&
                    InitialDrivingTime.Equals(input.InitialDrivingTime))
                ) && 
                (
                    PossibleSplit == input.PossibleSplit ||
                    PossibleSplit != null &&
                    PossibleSplit.SequenceEqual(input.PossibleSplit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Earliest != null)
                    hashCode = hashCode * 59 + Earliest.GetHashCode();
                if (Latest != null)
                    hashCode = hashCode * 59 + Latest.GetHashCode();
                if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                if (MaxDrivingTime != null)
                    hashCode = hashCode * 59 + MaxDrivingTime.GetHashCode();
                if (InitialDrivingTime != null)
                    hashCode = hashCode * 59 + InitialDrivingTime.GetHashCode();
                if (PossibleSplit != null)
                    hashCode = hashCode * 59 + PossibleSplit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
