/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Objective
    /// </summary>
    [DataContract]
    public partial class Objective :  IEquatable<Objective>, IValidatableObject
    {
        /// <summary>
        /// type of objective function, i.e. min or min-max 
        /// </summary>
        /// <value>type of objective function, i.e. min or min-max </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Min for value: min
            /// </summary>
            [EnumMember(Value = "min")]
            Min = 1,
            
            /// <summary>
            /// Enum MinMax for value: min-max
            /// </summary>
            [EnumMember(Value = "min-max")]
            MinMax = 2
        }

        /// <summary>
        /// type of objective function, i.e. min or min-max 
        /// </summary>
        /// <value>type of objective function, i.e. min or min-max </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// objective function value
        /// </summary>
        /// <value>objective function value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueEnum
        {
            
            /// <summary>
            /// Enum Completiontime for value: completion_time
            /// </summary>
            [EnumMember(Value = "completion_time")]
            Completiontime = 1,
            
            /// <summary>
            /// Enum Transporttime for value: transport_time
            /// </summary>
            [EnumMember(Value = "transport_time")]
            Transporttime = 2,
            
            /// <summary>
            /// Enum Vehicles for value: vehicles
            /// </summary>
            [EnumMember(Value = "vehicles")]
            Vehicles = 3
        }

        /// <summary>
        /// objective function value
        /// </summary>
        /// <value>objective function value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public ValueEnum? Value { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Objective" /> class.
        /// </summary>
        /// <param name="Type">type of objective function, i.e. min or min-max .</param>
        /// <param name="Value">objective function value.</param>
        public Objective(TypeEnum? Type = default(TypeEnum?), ValueEnum? Value = default(ValueEnum?))
        {
            this.Type = Type;
            this.Value = Value;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Objective {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Objective);
        }

        /// <summary>
        /// Returns true if Objective instances are equal
        /// </summary>
        /// <param name="input">Instance of Objective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Objective input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Value == input.Value ||
                    (Value != null &&
                    Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
