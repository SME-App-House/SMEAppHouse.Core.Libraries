/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Response
    /// </summary>
    [DataContract]
    public partial class Response :  IEquatable<Response>, IValidatableObject
    {
        /// <summary>
        /// indicates the current status of the job
        /// </summary>
        /// <value>indicates the current status of the job</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Waitinginqueue for value: waiting_in_queue
            /// </summary>
            [EnumMember(Value = "waiting_in_queue")]
            Waitinginqueue = 1,
            
            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 2,
            
            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 3
        }

        /// <summary>
        /// indicates the current status of the job
        /// </summary>
        /// <value>indicates the current status of the job</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Response" /> class.
        /// </summary>
        /// <param name="Copyrights">Copyrights.</param>
        /// <param name="JobId">unique identify of job - which you get when posting your request to the large problem solver.</param>
        /// <param name="Status">indicates the current status of the job.</param>
        /// <param name="WaitingInQueue">waiting time in ms.</param>
        /// <param name="ProcessingTime">processing time in ms. if job is still waiting in queue, processing_time is 0.</param>
        /// <param name="Solution">the solution. only available if status field indicates finished.</param>
        public Response(List<string> Copyrights = default(List<string>), string JobId = default(string), StatusEnum? Status = default(StatusEnum?), long? WaitingInQueue = default(long?), long? ProcessingTime = default(long?), Solution Solution = default(Solution))
        {
            this.Copyrights = Copyrights;
            this.JobId = JobId;
            this.Status = Status;
            this.WaitingInQueue = WaitingInQueue;
            this.ProcessingTime = ProcessingTime;
            this.Solution = Solution;
        }
        
        /// <summary>
        /// Gets or Sets Copyrights
        /// </summary>
        [DataMember(Name="copyrights", EmitDefaultValue=false)]
        public List<string> Copyrights { get; set; }

        /// <summary>
        /// unique identify of job - which you get when posting your request to the large problem solver
        /// </summary>
        /// <value>unique identify of job - which you get when posting your request to the large problem solver</value>
        [DataMember(Name="job_id", EmitDefaultValue=false)]
        public string JobId { get; set; }


        /// <summary>
        /// waiting time in ms
        /// </summary>
        /// <value>waiting time in ms</value>
        [DataMember(Name="waiting_in_queue", EmitDefaultValue=false)]
        public long? WaitingInQueue { get; set; }

        /// <summary>
        /// processing time in ms. if job is still waiting in queue, processing_time is 0
        /// </summary>
        /// <value>processing time in ms. if job is still waiting in queue, processing_time is 0</value>
        [DataMember(Name="processing_time", EmitDefaultValue=false)]
        public long? ProcessingTime { get; set; }

        /// <summary>
        /// the solution. only available if status field indicates finished
        /// </summary>
        /// <value>the solution. only available if status field indicates finished</value>
        [DataMember(Name="solution", EmitDefaultValue=false)]
        public Solution Solution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Response {\n");
            sb.Append("  Copyrights: ").Append(Copyrights).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WaitingInQueue: ").Append(WaitingInQueue).Append("\n");
            sb.Append("  ProcessingTime: ").Append(ProcessingTime).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Response);
        }

        /// <summary>
        /// Returns true if Response instances are equal
        /// </summary>
        /// <param name="input">Instance of Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    Copyrights == input.Copyrights ||
                    Copyrights != null &&
                    Copyrights.SequenceEqual(input.Copyrights)
                ) && 
                (
                    JobId == input.JobId ||
                    (JobId != null &&
                    JobId.Equals(input.JobId))
                ) && 
                (
                    Status == input.Status ||
                    (Status != null &&
                    Status.Equals(input.Status))
                ) && 
                (
                    WaitingInQueue == input.WaitingInQueue ||
                    (WaitingInQueue != null &&
                    WaitingInQueue.Equals(input.WaitingInQueue))
                ) && 
                (
                    ProcessingTime == input.ProcessingTime ||
                    (ProcessingTime != null &&
                    ProcessingTime.Equals(input.ProcessingTime))
                ) && 
                (
                    Solution == input.Solution ||
                    (Solution != null &&
                    Solution.Equals(input.Solution))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Copyrights != null)
                    hashCode = hashCode * 59 + Copyrights.GetHashCode();
                if (JobId != null)
                    hashCode = hashCode * 59 + JobId.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (WaitingInQueue != null)
                    hashCode = hashCode * 59 + WaitingInQueue.GetHashCode();
                if (ProcessingTime != null)
                    hashCode = hashCode * 59 + ProcessingTime.GetHashCode();
                if (Solution != null)
                    hashCode = hashCode * 59 + Solution.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
