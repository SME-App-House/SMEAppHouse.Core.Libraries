/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract]
    public partial class Activity :  IEquatable<Activity>, IValidatableObject
    {
        /// <summary>
        /// type of activity
        /// </summary>
        /// <value>type of activity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 1,
            
            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 2,
            
            /// <summary>
            /// Enum Service for value: service
            /// </summary>
            [EnumMember(Value = "service")]
            Service = 3,
            
            /// <summary>
            /// Enum PickupShipment for value: pickupShipment
            /// </summary>
            [EnumMember(Value = "pickupShipment")]
            PickupShipment = 4,
            
            /// <summary>
            /// Enum DeliverShipment for value: deliverShipment
            /// </summary>
            [EnumMember(Value = "deliverShipment")]
            DeliverShipment = 5,
            
            /// <summary>
            /// Enum Pickup for value: pickup
            /// </summary>
            [EnumMember(Value = "pickup")]
            Pickup = 6,
            
            /// <summary>
            /// Enum Delivery for value: delivery
            /// </summary>
            [EnumMember(Value = "delivery")]
            Delivery = 7,
            
            /// <summary>
            /// Enum Break for value: break
            /// </summary>
            [EnumMember(Value = "break")]
            Break = 8
        }

        /// <summary>
        /// type of activity
        /// </summary>
        /// <value>type of activity</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="type">type of activity.</param>
        /// <param name="id">id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to.</param>
        /// <param name="locationId">id that refers to address.</param>
        /// <param name="arrTime">arrival time at this activity in seconds.</param>
        /// <param name="endTime">end time of and thus departure time at this activity.</param>
        /// <param name="waitingTime">waiting time at this activity in seconds.</param>
        /// <param name="distance">cumulated distance from start to this activity in m.</param>
        /// <param name="drivingTime">driving time of driver in seconds.</param>
        /// <param name="loadBefore">Array with size/capacity dimensions before this activity.</param>
        /// <param name="loadAfter">Array with size/capacity dimensions after this activity.</param>
        public Activity(TypeEnum? type = default(TypeEnum?), string id = default(string), string locationId = default(string), long? arrTime = default(long?), long? endTime = default(long?), long? waitingTime = default(long?), double? distance = default(double?), long? drivingTime = default(long?), List<int?> loadBefore = default(List<int?>), List<int?> loadAfter = default(List<int?>))
        {
            this.Type = type;
            this.Id = id;
            this.LocationId = locationId;
            this.ArrTime = arrTime;
            this.EndTime = endTime;
            this.WaitingTime = waitingTime;
            this.Distance = distance;
            this.DrivingTime = drivingTime;
            this.LoadBefore = loadBefore;
            this.LoadAfter = loadAfter;
        }
        

        /// <summary>
        /// id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to
        /// </summary>
        /// <value>id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// id that refers to address
        /// </summary>
        /// <value>id that refers to address</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }

        /// <summary>
        /// arrival time at this activity in seconds
        /// </summary>
        /// <value>arrival time at this activity in seconds</value>
        [DataMember(Name="arr_time", EmitDefaultValue=false)]
        public long? ArrTime { get; set; }

        /// <summary>
        /// end time of and thus departure time at this activity
        /// </summary>
        /// <value>end time of and thus departure time at this activity</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public long? EndTime { get; set; }

        /// <summary>
        /// waiting time at this activity in seconds
        /// </summary>
        /// <value>waiting time at this activity in seconds</value>
        [DataMember(Name="waiting_time", EmitDefaultValue=false)]
        public long? WaitingTime { get; set; }

        /// <summary>
        /// cumulated distance from start to this activity in m
        /// </summary>
        /// <value>cumulated distance from start to this activity in m</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// driving time of driver in seconds
        /// </summary>
        /// <value>driving time of driver in seconds</value>
        [DataMember(Name="driving_time", EmitDefaultValue=false)]
        public long? DrivingTime { get; set; }

        /// <summary>
        /// Array with size/capacity dimensions before this activity
        /// </summary>
        /// <value>Array with size/capacity dimensions before this activity</value>
        [DataMember(Name="load_before", EmitDefaultValue=false)]
        public List<int?> LoadBefore { get; set; }

        /// <summary>
        /// Array with size/capacity dimensions after this activity
        /// </summary>
        /// <value>Array with size/capacity dimensions after this activity</value>
        [DataMember(Name="load_after", EmitDefaultValue=false)]
        public List<int?> LoadAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ArrTime: ").Append(ArrTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DrivingTime: ").Append(DrivingTime).Append("\n");
            sb.Append("  LoadBefore: ").Append(LoadBefore).Append("\n");
            sb.Append("  LoadAfter: ").Append(LoadAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Activity);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="input">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    LocationId == input.LocationId ||
                    (LocationId != null &&
                    LocationId.Equals(input.LocationId))
                ) && 
                (
                    ArrTime == input.ArrTime ||
                    (ArrTime != null &&
                    ArrTime.Equals(input.ArrTime))
                ) && 
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                    EndTime.Equals(input.EndTime))
                ) && 
                (
                    WaitingTime == input.WaitingTime ||
                    (WaitingTime != null &&
                    WaitingTime.Equals(input.WaitingTime))
                ) && 
                (
                    Distance == input.Distance ||
                    (Distance != null &&
                    Distance.Equals(input.Distance))
                ) && 
                (
                    DrivingTime == input.DrivingTime ||
                    (DrivingTime != null &&
                    DrivingTime.Equals(input.DrivingTime))
                ) && 
                (
                    LoadBefore == input.LoadBefore ||
                    LoadBefore != null &&
                    LoadBefore.SequenceEqual(input.LoadBefore)
                ) && 
                (
                    LoadAfter == input.LoadAfter ||
                    LoadAfter != null &&
                    LoadAfter.SequenceEqual(input.LoadAfter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                if (ArrTime != null)
                    hashCode = hashCode * 59 + ArrTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                if (WaitingTime != null)
                    hashCode = hashCode * 59 + WaitingTime.GetHashCode();
                if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                if (DrivingTime != null)
                    hashCode = hashCode * 59 + DrivingTime.GetHashCode();
                if (LoadBefore != null)
                    hashCode = hashCode * 59 + LoadBefore.GetHashCode();
                if (LoadAfter != null)
                    hashCode = hashCode * 59 + LoadAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
