/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// Route
    /// </summary>
    [DataContract]
    public partial class Route :  IEquatable<Route>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        /// <param name="VehicleId">id of vehicle that operates route.</param>
        /// <param name="Distance">distance of route in meter.</param>
        /// <param name="TransportTime">transport time of route in seconds.</param>
        /// <param name="CompletionTime">completion time of route in seconds.</param>
        /// <param name="WaitingTime">waiting time of route in seconds.</param>
        /// <param name="Activities">array of activities.</param>
        /// <param name="Points">array of route planning points.</param>
        public Route(string VehicleId = default(string), long? Distance = default(long?), long? TransportTime = default(long?), long? CompletionTime = default(long?), long? WaitingTime = default(long?), List<Activity> Activities = default(List<Activity>), List<RoutePoint> Points = default(List<RoutePoint>))
        {
            this.VehicleId = VehicleId;
            this.Distance = Distance;
            this.TransportTime = TransportTime;
            this.CompletionTime = CompletionTime;
            this.WaitingTime = WaitingTime;
            this.Activities = Activities;
            this.Points = Points;
        }
        
        /// <summary>
        /// id of vehicle that operates route
        /// </summary>
        /// <value>id of vehicle that operates route</value>
        [DataMember(Name="vehicle_id", EmitDefaultValue=false)]
        public string VehicleId { get; set; }

        /// <summary>
        /// distance of route in meter
        /// </summary>
        /// <value>distance of route in meter</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public long? Distance { get; set; }

        /// <summary>
        /// transport time of route in seconds
        /// </summary>
        /// <value>transport time of route in seconds</value>
        [DataMember(Name="transport_time", EmitDefaultValue=false)]
        public long? TransportTime { get; set; }

        /// <summary>
        /// completion time of route in seconds
        /// </summary>
        /// <value>completion time of route in seconds</value>
        [DataMember(Name="completion_time", EmitDefaultValue=false)]
        public long? CompletionTime { get; set; }

        /// <summary>
        /// waiting time of route in seconds
        /// </summary>
        /// <value>waiting time of route in seconds</value>
        [DataMember(Name="waiting_time", EmitDefaultValue=false)]
        public long? WaitingTime { get; set; }

        /// <summary>
        /// array of activities
        /// </summary>
        /// <value>array of activities</value>
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public List<Activity> Activities { get; set; }

        /// <summary>
        /// array of route planning points
        /// </summary>
        /// <value>array of route planning points</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public List<RoutePoint> Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TransportTime: ").Append(TransportTime).Append("\n");
            sb.Append("  CompletionTime: ").Append(CompletionTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Route);
        }

        /// <summary>
        /// Returns true if Route instances are equal
        /// </summary>
        /// <param name="input">Instance of Route to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Route input)
        {
            if (input == null)
                return false;

            return 
                (
                    VehicleId == input.VehicleId ||
                    (VehicleId != null &&
                    VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    Distance == input.Distance ||
                    (Distance != null &&
                    Distance.Equals(input.Distance))
                ) && 
                (
                    TransportTime == input.TransportTime ||
                    (TransportTime != null &&
                    TransportTime.Equals(input.TransportTime))
                ) && 
                (
                    CompletionTime == input.CompletionTime ||
                    (CompletionTime != null &&
                    CompletionTime.Equals(input.CompletionTime))
                ) && 
                (
                    WaitingTime == input.WaitingTime ||
                    (WaitingTime != null &&
                    WaitingTime.Equals(input.WaitingTime))
                ) && 
                (
                    Activities == input.Activities ||
                    Activities != null &&
                    Activities.SequenceEqual(input.Activities)
                ) && 
                (
                    Points == input.Points ||
                    Points != null &&
                    Points.SequenceEqual(input.Points)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (VehicleId != null)
                    hashCode = hashCode * 59 + VehicleId.GetHashCode();
                if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                if (TransportTime != null)
                    hashCode = hashCode * 59 + TransportTime.GetHashCode();
                if (CompletionTime != null)
                    hashCode = hashCode * 59 + CompletionTime.GetHashCode();
                if (WaitingTime != null)
                    hashCode = hashCode * 59 + WaitingTime.GetHashCode();
                if (Activities != null)
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                if (Points != null)
                    hashCode = hashCode * 59 + Points.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
