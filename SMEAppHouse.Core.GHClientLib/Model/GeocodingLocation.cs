/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// GeocodingLocation
    /// </summary>
    [DataContract]
    public partial class GeocodingLocation :  IEquatable<GeocodingLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodingLocation" /> class.
        /// </summary>
        /// <param name="Point">Point.</param>
        /// <param name="OsmId">OSM Id.</param>
        /// <param name="OsmType">N &#x3D; node, R &#x3D; relation, W &#x3D; way.</param>
        /// <param name="OsmKey">The osm key of the result like &#x60;place&#x60; or &#x60;amenity&#x60;.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Country">Country.</param>
        /// <param name="City">City.</param>
        /// <param name="State">State.</param>
        /// <param name="Street">Street.</param>
        /// <param name="Housenumber">Housenumber.</param>
        /// <param name="Postcode">Postcode.</param>
        public GeocodingLocation(GeocodingPoint Point = default(GeocodingPoint), string OsmId = default(string), string OsmType = default(string), string OsmKey = default(string), string Name = default(string), string Country = default(string), string City = default(string), string State = default(string), string Street = default(string), string Housenumber = default(string), string Postcode = default(string))
        {
            this.Point = Point;
            this.OsmId = OsmId;
            this.OsmType = OsmType;
            this.OsmKey = OsmKey;
            this.Name = Name;
            this.Country = Country;
            this.City = City;
            this.State = State;
            this.Street = Street;
            this.Housenumber = Housenumber;
            this.Postcode = Postcode;
        }
        
        /// <summary>
        /// Gets or Sets Point
        /// </summary>
        [DataMember(Name="point", EmitDefaultValue=false)]
        public GeocodingPoint Point { get; set; }

        /// <summary>
        /// OSM Id
        /// </summary>
        /// <value>OSM Id</value>
        [DataMember(Name="osm_id", EmitDefaultValue=false)]
        public string OsmId { get; set; }

        /// <summary>
        /// N &#x3D; node, R &#x3D; relation, W &#x3D; way
        /// </summary>
        /// <value>N &#x3D; node, R &#x3D; relation, W &#x3D; way</value>
        [DataMember(Name="osm_type", EmitDefaultValue=false)]
        public string OsmType { get; set; }

        /// <summary>
        /// The osm key of the result like &#x60;place&#x60; or &#x60;amenity&#x60;
        /// </summary>
        /// <value>The osm key of the result like &#x60;place&#x60; or &#x60;amenity&#x60;</value>
        [DataMember(Name="osm_key", EmitDefaultValue=false)]
        public string OsmKey { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Housenumber
        /// </summary>
        [DataMember(Name="housenumber", EmitDefaultValue=false)]
        public string Housenumber { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeocodingLocation {\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("  OsmId: ").Append(OsmId).Append("\n");
            sb.Append("  OsmType: ").Append(OsmType).Append("\n");
            sb.Append("  OsmKey: ").Append(OsmKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Housenumber: ").Append(Housenumber).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GeocodingLocation);
        }

        /// <summary>
        /// Returns true if GeocodingLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of GeocodingLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeocodingLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    Point == input.Point ||
                    (Point != null &&
                    Point.Equals(input.Point))
                ) && 
                (
                    OsmId == input.OsmId ||
                    (OsmId != null &&
                    OsmId.Equals(input.OsmId))
                ) && 
                (
                    OsmType == input.OsmType ||
                    (OsmType != null &&
                    OsmType.Equals(input.OsmType))
                ) && 
                (
                    OsmKey == input.OsmKey ||
                    (OsmKey != null &&
                    OsmKey.Equals(input.OsmKey))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Country == input.Country ||
                    (Country != null &&
                    Country.Equals(input.Country))
                ) && 
                (
                    City == input.City ||
                    (City != null &&
                    City.Equals(input.City))
                ) && 
                (
                    State == input.State ||
                    (State != null &&
                    State.Equals(input.State))
                ) && 
                (
                    Street == input.Street ||
                    (Street != null &&
                    Street.Equals(input.Street))
                ) && 
                (
                    Housenumber == input.Housenumber ||
                    (Housenumber != null &&
                    Housenumber.Equals(input.Housenumber))
                ) && 
                (
                    Postcode == input.Postcode ||
                    (Postcode != null &&
                    Postcode.Equals(input.Postcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Point != null)
                    hashCode = hashCode * 59 + Point.GetHashCode();
                if (OsmId != null)
                    hashCode = hashCode * 59 + OsmId.GetHashCode();
                if (OsmType != null)
                    hashCode = hashCode * 59 + OsmType.GetHashCode();
                if (OsmKey != null)
                    hashCode = hashCode * 59 + OsmKey.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                if (Housenumber != null)
                    hashCode = hashCode * 59 + Housenumber.GetHashCode();
                if (Postcode != null)
                    hashCode = hashCode * 59 + Postcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
