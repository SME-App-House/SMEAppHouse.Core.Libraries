/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace SMEAppHouse.Core.GHClientLib.Model
{
    /// <summary>
    /// CostMatrix
    /// </summary>
    [DataContract]
    public partial class CostMatrix :  IEquatable<CostMatrix>, IValidatableObject
    {
        /// <summary>
        /// type of cost matrix, currently default or google are supported
        /// </summary>
        /// <value>type of cost matrix, currently default or google are supported</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,
            
            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 2
        }

        /// <summary>
        /// type of cost matrix, currently default or google are supported
        /// </summary>
        /// <value>type of cost matrix, currently default or google are supported</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CostMatrix" /> class.
        /// </summary>
        /// <param name="Type">type of cost matrix, currently default or google are supported.</param>
        /// <param name="Url">URL of matrix service.</param>
        /// <param name="LocationIds">LocationIds.</param>
        /// <param name="Data">Data.</param>
        /// <param name="Profile">vehicle profile or empty if catch all fallback.</param>
        public CostMatrix(TypeEnum? Type = default(TypeEnum?), string Url = default(string), List<string> LocationIds = default(List<string>), CostMatrixData Data = default(CostMatrixData), string Profile = default(string))
        {
            this.Type = Type;
            this.Url = Url;
            this.LocationIds = LocationIds;
            this.Data = Data;
            this.Profile = Profile;
        }
        

        /// <summary>
        /// URL of matrix service
        /// </summary>
        /// <value>URL of matrix service</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets LocationIds
        /// </summary>
        [DataMember(Name="location_ids", EmitDefaultValue=false)]
        public List<string> LocationIds { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public CostMatrixData Data { get; set; }

        /// <summary>
        /// vehicle profile or empty if catch all fallback
        /// </summary>
        /// <value>vehicle profile or empty if catch all fallback</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CostMatrix {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  LocationIds: ").Append(LocationIds).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CostMatrix);
        }

        /// <summary>
        /// Returns true if CostMatrix instances are equal
        /// </summary>
        /// <param name="input">Instance of CostMatrix to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CostMatrix input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Url == input.Url ||
                    (Url != null &&
                    Url.Equals(input.Url))
                ) && 
                (
                    LocationIds == input.LocationIds ||
                    LocationIds != null &&
                    LocationIds.SequenceEqual(input.LocationIds)
                ) && 
                (
                    Data == input.Data ||
                    (Data != null &&
                    Data.Equals(input.Data))
                ) && 
                (
                    Profile == input.Profile ||
                    (Profile != null &&
                    Profile.Equals(input.Profile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (LocationIds != null)
                    hashCode = hashCode * 59 + LocationIds.GetHashCode();
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                if (Profile != null)
                    hashCode = hashCode * 59 + Profile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
